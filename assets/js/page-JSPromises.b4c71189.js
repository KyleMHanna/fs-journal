(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{502:function(e,t,s){"use strict";s.r(t);var o=s(1),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"js-promises"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js-promises"}},[e._v("#")]),e._v(" JS Promises")]),e._v(" "),s("p",[s("strong",[e._v("What are the three states of a Promise?")])]),e._v(" "),s("p",[e._v("Pending: Initial State, before the Promise succeeds or fails\nResolved: Completed Promise\nRejected: Failed Promise")]),e._v(" "),s("p",[s("strong",[e._v('How do promises seek to resolve the issues of "callback hell"?')]),e._v("\nPromises seek to resolve the issue of callback hell by being able to chain different promises so it basically has a fall back for multiple scenarios.\nChaining is one of the best features of Promises.")]),e._v(" "),s("p",[s("strong",[e._v("What is the difference between .then() and .catch()?")]),e._v("\nThe then( ) method is called after the Promise is resolved. Then we can decide what to do with the resolved Promise.\nWhat if the Promise fails? Then, we need to use the catch( ) method.\nSo if the promise gets rejected, it will jump to the catch( ) method and this time we will see a different message on the console.")]),e._v(" "),s("p",[e._v("link for lab")]),e._v(" "),s("p",[e._v("https://kylemhanna.github.io/GregsList/")])])}),[],!1,null,null,null);t.default=i.exports}}]);